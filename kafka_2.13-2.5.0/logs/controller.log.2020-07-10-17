[2020-07-10 17:04:38,635] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:04:38,636] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:04:38,636] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:04:38,636] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:09:38,636] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:09:38,643] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:09:38,644] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:09:38,644] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:14:38,644] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:14:38,644] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:14:38,644] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:14:38,644] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:19:38,645] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:19:38,651] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:19:38,652] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:19:38,652] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:24:38,652] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:24:38,652] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:24:38,652] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:24:38,652] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:29:38,653] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:29:38,653] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:29:38,653] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:29:38,653] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:34:38,653] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:34:38,661] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:34:38,662] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:34:38,662] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:39:38,662] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:39:38,662] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:39:38,662] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:39:38,662] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:44:38,662] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:44:38,667] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:44:38,668] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:44:38,668] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:49:38,668] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:49:38,691] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:49:38,691] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:49:38,691] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:52:49,787] INFO [Controller id=0] New topics: [Set(stateful_data_of_query)], deleted topics: [Set()], new partition replica assignment [Map(stateful_data_of_query-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-10 17:52:49,787] INFO [Controller id=0] New partition creation callback for stateful_data_of_query-0 (kafka.controller.KafkaController)
[2020-07-10 17:52:49,887] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-07-10 17:52:49,910] INFO [Controller id=0] New topics: [Set(metadata_input)], deleted topics: [Set()], new partition replica assignment [Map(metadata_input-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-10 17:52:49,910] INFO [Controller id=0] New partition creation callback for metadata_input-0 (kafka.controller.KafkaController)
[2020-07-10 17:52:49,990] INFO [Controller id=0] New topics: [HashSet(message)], deleted topics: [Set()], new partition replica assignment [Map(message-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-10 17:52:49,990] INFO [Controller id=0] New partition creation callback for message-0 (kafka.controller.KafkaController)
[2020-07-10 17:54:38,691] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:54:38,692] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:54:38,692] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2020-07-10 17:54:38,692] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:54:59,365] INFO [Controller id=0] New topics: [HashSet(Prediction)], deleted topics: [HashSet()], new partition replica assignment [Map(Prediction-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-10 17:54:59,365] INFO [Controller id=0] New partition creation callback for Prediction-0 (kafka.controller.KafkaController)
[2020-07-10 17:58:08,469] DEBUG [Controller id=0] Delete topics listener fired for topics example_topic to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:58:08,470] INFO [Controller id=0] Starting topic deletion for topics example_topic (kafka.controller.KafkaController)
[2020-07-10 17:58:08,470] INFO [Topic Deletion Manager 0] Handling deletion for topics example_topic (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:08,472] INFO [Topic Deletion Manager 0] Deletion of topic example_topic (re)started (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:08,519] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=example_topic,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:58:08,521] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=example_topic,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:58:08,652] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(example_topic-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-10 17:58:08,681] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=example_topic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:08,682] INFO [Topic Deletion Manager 0] Handling deletion for topics example_topic (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:08,951] INFO [Topic Deletion Manager 0] Deletion of topic example_topic successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:08,952] INFO [Controller id=0] New topics: [HashSet()], deleted topics: [HashSet()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-10 17:58:08,952] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:58:30,955] DEBUG [Controller id=0] Delete topics listener fired for topics myTopic to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:58:30,955] INFO [Controller id=0] Starting topic deletion for topics myTopic (kafka.controller.KafkaController)
[2020-07-10 17:58:30,956] INFO [Topic Deletion Manager 0] Handling deletion for topics myTopic (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:30,956] INFO [Topic Deletion Manager 0] Deletion of topic myTopic (re)started (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:30,966] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=myTopic,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:58:30,966] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=myTopic,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:58:31,036] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(myTopic-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-10 17:58:31,036] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=myTopic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:31,036] INFO [Topic Deletion Manager 0] Handling deletion for topics myTopic (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:31,103] INFO [Topic Deletion Manager 0] Deletion of topic myTopic successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-10 17:58:31,104] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-10 17:58:31,105] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:59:03,251] DEBUG [Controller id=0] Delete topics listener fired for topics Prediction to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:59:03,251] INFO [Controller id=0] Starting topic deletion for topics Prediction (kafka.controller.KafkaController)
[2020-07-10 17:59:03,251] INFO [Topic Deletion Manager 0] Handling deletion for topics Prediction (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:03,251] INFO [Topic Deletion Manager 0] Deletion of topic Prediction (re)started (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:03,262] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=Prediction,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:59:03,263] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=Prediction,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:59:03,365] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(Prediction-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-10 17:59:03,365] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=Prediction,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:03,365] INFO [Topic Deletion Manager 0] Handling deletion for topics Prediction (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:03,444] INFO [Topic Deletion Manager 0] Deletion of topic Prediction successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:03,444] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-10 17:59:03,445] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:59:20,379] DEBUG [Controller id=0] Delete topics listener fired for topics message to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:59:20,379] INFO [Controller id=0] Starting topic deletion for topics message (kafka.controller.KafkaController)
[2020-07-10 17:59:20,379] INFO [Topic Deletion Manager 0] Handling deletion for topics message (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:20,379] INFO [Topic Deletion Manager 0] Deletion of topic message (re)started (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:20,390] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=message,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:59:20,390] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=message,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:59:20,469] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(message-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-10 17:59:20,469] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=message,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:20,470] INFO [Topic Deletion Manager 0] Handling deletion for topics message (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:20,536] INFO [Topic Deletion Manager 0] Deletion of topic message successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:20,537] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-10 17:59:20,538] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:59:32,996] DEBUG [Controller id=0] Delete topics listener fired for topics metadata_input to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:59:32,996] INFO [Controller id=0] Starting topic deletion for topics metadata_input (kafka.controller.KafkaController)
[2020-07-10 17:59:32,996] INFO [Topic Deletion Manager 0] Handling deletion for topics metadata_input (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:32,996] INFO [Topic Deletion Manager 0] Deletion of topic metadata_input (re)started (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:33,007] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=metadata_input,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:59:33,008] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=metadata_input,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:59:33,087] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(metadata_input-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-10 17:59:33,087] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=metadata_input,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:33,088] INFO [Topic Deletion Manager 0] Handling deletion for topics metadata_input (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:33,154] INFO [Topic Deletion Manager 0] Deletion of topic metadata_input successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:33,155] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-10 17:59:33,156] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:59:38,692] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-10 17:59:38,693] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-10 17:59:38,693] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-10 17:59:38,693] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-10 17:59:52,337] DEBUG [Controller id=0] Delete topics listener fired for topics stateful_data_of_query to be deleted (kafka.controller.KafkaController)
[2020-07-10 17:59:52,337] INFO [Controller id=0] Starting topic deletion for topics stateful_data_of_query (kafka.controller.KafkaController)
[2020-07-10 17:59:52,337] INFO [Topic Deletion Manager 0] Handling deletion for topics stateful_data_of_query (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:52,338] INFO [Topic Deletion Manager 0] Deletion of topic stateful_data_of_query (re)started (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:52,348] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=stateful_data_of_query,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:59:52,348] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=stateful_data_of_query,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-10 17:59:52,383] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(stateful_data_of_query-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-10 17:59:52,383] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=stateful_data_of_query,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:52,383] INFO [Topic Deletion Manager 0] Handling deletion for topics stateful_data_of_query (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:52,461] INFO [Topic Deletion Manager 0] Deletion of topic stateful_data_of_query successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-10 17:59:52,462] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-10 17:59:52,462] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
